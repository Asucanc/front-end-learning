document.write() 方法会向文档流当中加入新的html内容， 如果在文档加载完成之后再调用document.write()，比如在一个事件函数中调用，会将原本的内容覆盖掉。

JavaScript 输出：
JavaScript没有打印或者输出的函数。JS可以通过以下方式输出显示数据：
1. windows.alert() 弹出警告框
2. document.write() 将内容写到HTML文档中
3. innerHTML 写入到HTML元素中，使用之前需获取元素，如getElementById()
4. console.log() 最常用的方式，写入到浏览器控制台输出

JavaScript 语法
JavaScript 字面量： 编程语言中，固定值成为字面量，如3.14
JavaScript 变量： 使用 var关键字定义变量，使用等号为变量赋值
字面量和变量的区别： 变量是一个名称。字面量是一个值。
JavaScript 有多种数据类型：数字，字符串，数组，对象等等
var length = 16;
var points = x * 10;
var lastName = 'Kenshin';
var cars = ["BWM", "Volvo", "Audi"]
var person = { name: 'kenshin', age: 19 }

JavaScript 语句：
关于分号， 分号用于分隔JavaScript语句，我们可以在同一行中编写多条语句。
在 JavaScript 中，用分号来结束语句是可选的。建议使用分号，提高程序代码可读性。

JavaScript 语句标识符：
break: 用于跳出循环
catch 语句块，在try语句块执行出错的时候执行 catch 语句块
continue 跳出循环的一个迭代
do ... while 先执行一次语句块，在条件为true的时候继续执行语句块
for 在条件语句为true的时候，执行指定次数的代码块
for ...in 用于遍历数组或对象的属性， 对数组或对象的属性进行循环操作
function 定义一个函数
if ...else 条件分支，基于不同的条件来执行不同的操作
return 推出函数，或者返回函数结果
switch 用于基于不同条件执行不同的操作
throw 抛出生成错误
try 实现程序的错误处理，与catch一同使用
var 声明一个变量
while 当条件语句为true时，执行语句块

空格： js会忽略掉多余的空格，可以在代码添加空格提高代码可读性
折行： 在字符串中可以通过反斜杠 (\) 进行换行， 如
console.log("第一行 \ 
  第二行");
注释： 单行注释: //    多行注释：  /*  */

JavaScript 变量，变量是存储数据的容器
变量以字母开头，当然也可以 $和_符号开头（不推荐），变量大小写敏感
重新声明变量不会使之前的值丢失，
关于变量声明的关键字， 在 2015以前，使用var来声明 JavaScript变量，
在2015年后，ES6允许我们使用const关键字来定义一个常量，使用let来定义 限定范围内作用域的变量。

JavaScript 的 let 和 count
ES6 出现了两个重要的关键字 let和const
let 声明的变量只在 let 命令行所在的代码块内有效， const 声明一个只读常量，一旦声明，常量的值不能再改变
ES6之前， JavaScript只有两种作用域，全局变量 和 函数内的局部变量
全局变量： var 声明在函数外的变量，作用域是全局的，任何地方都可以访问。
局部变量 在函数内部使用 var 声明的变量作用域是局部的（函数内）, note: 如果不适用var则是全局变量
块级作用域： ES6之前是没有块级作用域的，使用var声明的变量不具有块级作用域特性， 使用let命令声明的变量在{}内有效。在{}之外不能访问
重新声明变量：  var关键字重新声明变量可能会带来问题， 在块中重新声明变量会影响声明块外的变量，很好理解，因为 var没有块级作用域
循环作用域： for (var i = 0; i < 10; i++) 和 for (let i = 0;i < 10; i++)的区别
HTML代码中使用全局变量： JavaScript中，全局作用域是针对 JavaScript环境，在HTML中，全局作用域是针对windows对象：let 和 var在此处有所区别
  使用 var 关键字声明的全局作用域变量属于 window对象
  使用 let 关键字声明的全局作用域变量不属于 window对象
重置变量： 
  使用 var 声明的变量在任何地方都可以修改
  在相同的作用域或块级作用域中，不能使用 let 关键字来重置 var 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 let 关键字来重置 let 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 var 关键字来重置 let 关键字声明的变量
  let 关键字在不停的作用域或者不同的块级作用域中是可以重新声明赋值的
  //const
  在相同的作用域或块级作用域中，不能使用 const 来重置 var 和 let 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 const 来重置 const 关键字声明的变量
  const 关键字在不同观点作用域或不同的块级作用域中是可以重新声明赋值的

变量提升：简而言之就是变量可以先使用再声明。
  var 关键字 可以变量提升
  let 关键字 不可以 变量提升
  const 关键字 不支持 变量提升，必需先声明再使用！

const 关键字： const 用于声明一个或多个常量，声明时就必需进行初始化，且初始化之后值不可以再修改。
const 定义的变量并非不可变，它定义一个常量引用一个值， 如果 使用 const 声明对象或是数组，是可以改变对象的属性或数组的成员的！

JavaScript JSON
JSON 全称为 JavaScript Object Notation
JSON 是一种轻量级的易于理解的数据交换格式.
JSON 在格式语法上与创建JavaScript对象代码相同，所以很容易将JSON数据转换为JavaScript对象
JSON 语法规则：
  数据为 键/值 对
  数据由逗号分隔
  大括号保存对象
  方括号保存数组
JS 方法： 
  JSON.parse() 将JSON字符串转换为 JavaScript对象 
  JSON.stringify(value[, replacer[, space]]) 用于将 JavaScript 值转换为 JSON字符串
    value:
      必需， 要转换的 JavaScript 值（通常为对象或数组）。
    replacer:
      可选。用于转换结果的函数或数组。
      如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
      如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。
    space:
      可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。





