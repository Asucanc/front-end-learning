document.write() 方法会向文档流当中加入新的html内容， 如果在文档加载完成之后再调用document.write()，比如在一个事件函数中调用，会将原本的内容覆盖掉。

JavaScript 输出：
JavaScript没有打印或者输出的函数。JS可以通过以下方式输出显示数据：
1. windows.alert() 弹出警告框
2. document.write() 将内容写到HTML文档中
3. innerHTML 写入到HTML元素中，使用之前需获取元素，如getElementById()
4. console.log() 最常用的方式，写入到浏览器控制台输出

JavaScript 语法
JavaScript 字面量： 编程语言中，固定值成为字面量，如3.14
JavaScript 变量： 使用 var关键字定义变量，使用等号为变量赋值
字面量和变量的区别： 变量是一个名称。字面量是一个值。
JavaScript 有多种数据类型：数字，字符串，数组，对象等等
var length = 16;
var points = x * 10;
var lastName = 'Kenshin';
var cars = ["BWM", "Volvo", "Audi"]
var person = { name: 'kenshin', age: 19 }

JavaScript 语句：
关于分号， 分号用于分隔JavaScript语句，我们可以在同一行中编写多条语句。
在 JavaScript 中，用分号来结束语句是可选的。建议使用分号，提高程序代码可读性。

JavaScript 语句标识符：
break: 用于跳出循环
catch 语句块，在try语句块执行出错的时候执行 catch 语句块
continue 跳出循环的一个迭代
do ... while 先执行一次语句块，在条件为true的时候继续执行语句块
for 在条件语句为true的时候，执行指定次数的代码块
for ...in 用于遍历数组或对象的属性， 对数组或对象的属性进行循环操作
function 定义一个函数
if ...else 条件分支，基于不同的条件来执行不同的操作
return 推出函数，或者返回函数结果
switch 用于基于不同条件执行不同的操作
throw 抛出生成错误
try 实现程序的错误处理，与catch一同使用
var 声明一个变量
while 当条件语句为true时，执行语句块

空格： js会忽略掉多余的空格，可以在代码添加空格提高代码可读性
折行： 在字符串中可以通过反斜杠 (\) 进行换行， 如
console.log("第一行 \ 
  第二行");
注释： 单行注释: //    多行注释：  /*  */

JavaScript 变量，变量是存储数据的容器
变量以字母开头，当然也可以 $和_符号开头（不推荐），变量大小写敏感
重新声明变量不会使之前的值丢失，
关于变量声明的关键字， 在 2015以前，使用var来声明 JavaScript变量，
在2015年后，ES6允许我们使用const关键字来定义一个常量，使用let来定义 限定范围内作用域的变量。

JavaScript 的 let 和 count
ES6 出现了两个重要的关键字 let和const
let 声明的变量只在 let 命令行所在的代码块内有效， const 声明一个只读常量，一旦声明，常量的值不能再改变
ES6之前， JavaScript只有两种作用域，全局变量 和 函数内的局部变量
全局变量： var 声明在函数外的变量，作用域是全局的，任何地方都可以访问。
局部变量 在函数内部使用 var 声明的变量作用域是局部的（函数内）, note: 如果不适用var则是全局变量
块级作用域： ES6之前是没有块级作用域的，使用var声明的变量不具有块级作用域特性， 使用let命令声明的变量在{}内有效。在{}之外不能访问
重新声明变量：  var关键字重新声明变量可能会带来问题， 在块中重新声明变量会影响声明块外的变量，很好理解，因为 var没有块级作用域
循环作用域： for (var i = 0; i < 10; i++) 和 for (let i = 0;i < 10; i++)的区别
HTML代码中使用全局变量： JavaScript中，全局作用域是针对 JavaScript环境，在HTML中，全局作用域是针对windows对象：let 和 var在此处有所区别
  使用 var 关键字声明的全局作用域变量属于 window对象
  使用 let 关键字声明的全局作用域变量不属于 window对象
重置变量： 
  使用 var 声明的变量在任何地方都可以修改
  在相同的作用域或块级作用域中，不能使用 let 关键字来重置 var 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 let 关键字来重置 let 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 var 关键字来重置 let 关键字声明的变量
  let 关键字在不停的作用域或者不同的块级作用域中是可以重新声明赋值的
  //const
  在相同的作用域或块级作用域中，不能使用 const 来重置 var 和 let 关键字声明的变量
  在相同的作用域或块级作用域中，不能使用 const 来重置 const 关键字声明的变量
  const 关键字在不同观点作用域或不同的块级作用域中是可以重新声明赋值的

变量提升：简而言之就是变量可以先使用再声明。
  var 关键字 可以变量提升
  let 关键字 不可以 变量提升
  const 关键字 不支持 变量提升，必需先声明再使用！

const 关键字： const 用于声明一个或多个常量，声明时就必需进行初始化，且初始化之后值不可以再修改。
const 定义的变量并非不可变，它定义一个常量引用一个值， 如果 使用 const 声明对象或是数组，是可以改变对象的属性或数组的成员的！

JavaScript JSON
JSON 全称为 JavaScript Object Notation
JSON 是一种轻量级的易于理解的数据交换格式.
JSON 在格式语法上与创建JavaScript对象代码相同，所以很容易将JSON数据转换为JavaScript对象
JSON 语法规则：
  数据为 键/值 对
  数据由逗号分隔
  大括号保存对象
  方括号保存数组
JS 方法： 
  JSON.parse() 将JSON字符串转换为 JavaScript对象 
  JSON.stringify(value[, replacer[, space]]) 用于将 JavaScript 值转换为 JSON字符串
    value:
      必需， 要转换的 JavaScript 值（通常为对象或数组）。
    replacer:
      可选。用于转换结果的函数或数组。
      如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
      如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。
    space:
      可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t。

JavaScript 数据类型
值类型(基本类型): 字符串(String)、数字（Number）、布尔（Boolean）、对空（Null）、未定义（Undefined）、Symbol（ES6引入，表示独一无二的值）.
引用数据类型： 对象（Object）、数组（Array）、函数（Function）

JavaScript 拥有动态类型， 这意味着相同的变量可以用作不同的类型：
   var x;  // x 为undefined
   var x = 5; // x为数字
   var x = "kenshin"; // 现在 x 为字符串

JavaScript 字符串
字符串是存储字符（比如 “Kenshin”）的变量
字符串可以是 引号中的任意文本。你可以使用 单引号 或 双引号

JavaScript 数字
JavaScript 只有一种数字类型，数字可以带小数点，也可以不带，极大极小的数字可通过科学计数法书写  var x = 123e6

JavaScript 布尔
布尔逻辑只能有两个值 true 或 false

Undefined 和 NUll
Undefined 这个值表示变量不含有值
可以通过将变量的值设置为 null 来清空变量

声明变量类型
当您声明新变量时，可以使用关键词 "new" 来声明其类型
  var carname = new String;
  var x = new Number;
  var y = new Boolean;
  var cars = new Array;
  var person = new Object;
JavaScript 变量均为对象， 当您声明一个变量时，就创建了一个新的对象。

JavaScript 对象
JavaScript对象是拥有属性和方法的数据。

对象属性
可以说， JavaScript对象是变量的容器。 
但是，我们通常认为 JavaScript对象是键值对的容器。
键值对通常的写法为 name: value, 键值对在JavaScript对象通常称为对象属性。

JavaScript 函数
函数是有事件驱动的或者当它被调用时执行的可重复使用的代码块
函数语法： 函数是包括在花括号里面的代码块，前面使用关键字 function 定义
  function methodname(arg1, arg2) {
    
  }
带有返回值的函数
  有时我们会希望函数返回它被调用的地方，通过return 实现
  在使用return语句时，函数会停止执行，并返回指定的值。
  function methodname(arg1, arg2) {
    return 5;
  }
  在仅仅是想退出函数时，也可以使用return语句。 返回值是可选的

JavaScript 变量的生存期
JavaScript变量的生命周期从他们被声明的时候开始。其中，
  局部变量会在函数运行以后删除。
  全局变量会在页面关闭之后被删除。

向未声明的 JavaScript变量分配值，
  赋值给未声明的变量，该变量将作为window的一个属性。
  非严格模式下， 给未声明的变量赋值创建的是全局变量，是全局对象的可配置属性，可以删除。

JavaScript 作用域
  在JavaScript中， 作用域为可访问变量，对象，函数的集合。
  JavaScript 局部作用域，变量在函数内部声明，为局部变量，有局部作用域
  JavaScript 全巨变领啊，变量在函数外定义，即为全局变量， 全局变量拥有全局作用域，网页中所有脚本和函数均可以使用
  note： 如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。

JavaScript 事件
HTML事件是发生在HTML元素上面的事情。
当在HTML页面中使用JavaScript时，JavaScript可以触发这些事件。
常见HTML事件：
  onchange = HTML元素改变
  onclick=用户点击HTML元素
  onmouseover=用户在一个HTML元素上面移动鼠标
  onmouseout=用户从一个HTML元素上移开鼠标
  onkeydown=用户按下键盘按键
  onload=浏览器完成页面加载

JavaScript 字符串
js 字符串的转义用的是 \
  var x = "test";
  var y = new String("test");
  console.log(typeof x);  // string
  console.log(typeof y);  // object
  note: 不要创建string对象， 会拖慢速度， 产生其他副作用。
  如： x === y   // false
  js中 === 为绝对相等， 数据类型和值都必须相等

  js 字符串方法中 substr, slice, substring 的区别：
    blog link: https://www.cnblogs.com/echolun/p/7646025.html
  实例：
    var x = "kenshin";
    console.log(x.charAt(1));
    console.log(x.charCodeAt("e"));
    console.log(x.concat(" is a boy"));
    console.log(x.indexOf("n"));
    console.log(x.lastIndexOf("n"));
    console.log(String.fromCharCode(65));
    console.log(x.slice(-5, 7));
    console.log(x.substr(-5, 5));
    console.log(x.split(','));
    console.log(x.substring(6, -1));
    console.log(x.toUpperCase());
    console.log(x.toLowerCase());
    console.log(x.valueOf());

  其他数据类型转换为布尔类型的规则: null、undefined、0、NaN、空字符串转换为false，其他转化为 true。
  1、逻辑与 &&
  返回的不是单纯的 true 还是 false，而是具体的值；
  若是第一个值转换布尔值为 true，就返回第二个值；反之，返回第一个值。
  换句话说：哪个值是错的就返回哪个值，如果都是对的，返回最后一个值。
  2、逻辑或 ||
  同 && 类似，返回的不是单纯的 true 和 false，而是具体的值。
  这个是从头开始，遇到能转换成 true 的值，就返回那个值，如果没有 true 的就返回最后一个值。

  JavaScript switch
    switch中使用的是 绝对相等判断， 即类型与值都要相等
    switch中 {} 不是必须的

  JavaScript for 循环
  不同类型的循环：
    for - 循环代码块一定的次数
    for/in 循环遍历对象的属性
    while - 当条件为true的时候循环指定代码块
    do/while - 先执行一遍，如果条件仍未真，接着执行直到条件不为真退出循环
    for/of  ES6 引进的特性
  note: 对数组进行循环遍历的时候， for/in 会跳过没被赋值的元素， for循环会打印 undefined.

JavaScript break 和 continue 语句
  break 语句用于跳出循环。
  continue 用于跳过循环中的一个迭代。

JavaScript typeof
使用typeof来检测变量的数据类型,typeof 
用以获取一个变量或者表达式的类型，typeof 一般只能返回如下几个结果：
number,boolean,string,function（函数）,object（NULL,数组，对象）,undefined
  用 typeof 检测 null 返回是object。
  如果使用undefined 来清空对象， typeof显示为 undefined
  typeof 一个没有值的变量会返回 undefined。
  任何变量都可以通过设置值为 undefined 来清空。 类型为 undefined.
  null 和 undefined 的值相等，但类型不等：
    typeof undefined   // undefined
    typeof null   // object
    null == undefined   // true
    null === undefined    // false

JavaScript 类型转换
  Number()转化为数字， String()转换为字符串，Boolean()转换为布尔值
JavaScript 中有6中不同数据类型：
  string  number  boolean  object  function  symbol
3中对象类型
  Object Date Array
2种不包含任何值的数据类型
  null  undefined
NaN 与任何值都不相等，包括 NaN 本身

JavaScript 正则表达式
正则表达式，使用单个字符串来描述、匹配一系列符合某个句式规则的字符串的搜索模式
在JavaScript中，正则表达式通常用于两个字符串方法： search() 和 replace()
search() 方法用于检索字符串中指定的子字符串，返回子串的起始位置。
replace() 方法用于在字符串中用一些字符替换另一些字符。
test() 正则表达式方法，test()方法用于检测一个字符串是否匹配某个模式，如果匹配返回true，否则返回false.
exec() 正则表达式方法，用于检索字符串中的正则表达式的匹配，该函数返回一个数组，其中存放匹配的结果，如果没有找到匹配，返回null。

JavaScript 错误 - throw、 try 和 catch
try 语句测试代码块的错误
catch 语句处理错误
throw 语句创建自定义错误
finally 语句在 try 和 catch 语句之后，无论是否触发异常，该语句都会执行

JavaScript 表单
onsubmit="return validateForm()" 为什么不是 onsubmit="validateForm()" ？？
onsubmit="validateForm()" 能够调用 validateForm() 对表单进行验证，但是在验证不通过的情况下，并不能阻止表单提交。
onsubmit="return validateForm()" 当验证不通过时，返回 false，可以阻止表单提交。
为何？
原来 onsubmit 属性就像是 <form> 这个 html 对象的一个方法名，其值（一字符串）就是其方法体，默认返回 true；
onsubmit="return validateForm()"
相当于:
  Form.prototype.onsubmit = function() {
      return validateForm()
  };
这样复写了 onsubmit 的默认方法（默认返回 true），根据 validateForm() 的结果返回 true 或 false，当验证不通过时，返回 false，onsubmit="return false;" 阻止表单提交。

JavaScript中有很多保留字，命名方法和变量的时候请避开这些词汇， name虽然不是保留字，但是请不要使用它

JavaScript中的 this 关键字
方法中， this表示该方法的所属对象
单独使用， this表示全局对象
函数中， this表示全局对象。 但是在严格模式中， this 是 Undefined
在事件中， this表示接收事件的元素
apply 和 call 允许切换函数执行的上下文环境（context），即 this 绑定的对象，可以将 this 引用到任何对象

JavaScript:void(0) 含义
  其中的void是关键字，该操作符指定要计算一个表达式但是不返回值.

JavaScript 异步编程
异步（async, Asynchronous）与 同步（Synchronous,sync）相对的概念。
同步： 指步骤在一个控制流序列中顺序执行
异步：不保证同步，一个异步过程的执行将不再与原有的序列有顺序关系
  简而言之就是，同步按你的代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高，异步还可以理解为从主线程发射一个子线程来完成任务
JavaScript 中的异步操作函数往往通过 回调函数 来实现异步任务的结果处理

异步AJAX
异步回调广泛应用于AJAX编程
  实例：
  var xhr = new XMLHttpRequest();
  xhr.onload = function() {
    // 输出接收到的文字数据
    console.log(xhr.responseText);
  }
  xhr.onerror = function() {
    console.log("error msg");
  }
  xhr.open("GET", url, true);
  xhr.send();

  //jQuery 里面的 ajax调用
  $.get(url, function(data, status) {
    //do something here
  })

JavaScript Promise
Promise出现在 ECMAScript6 提供的类，目的是更加优雅地书写复杂的异步任务

如何体现优雅的：
  场景：多次调用异步任务，分三次输出字符串，第一次间隔1s，第二次4s，第三次3s，分别用setTimeout和Promise实现：
  setTimeout:
  setTimeout(function() {
    console.log("first");
    setTimeout(function() {
      console.log("second");
      setTimeout(function() {
        console.log("third");
      }, 3000);
    }, 4000);
  }, 1000);

  Promise:
  new Promise(function(resolve, reject) {
    setTimeout(function() {
      console.log("first");
      resolve();
    }, 1000);
  }).then(function() {
    return new Promise(function(resolve, reject){
      setTimeout(function(){
        console.log("second");
        resolve();
      }, 4000);
    })
  }).then(function(){
    setTimeout(function(){
      console.log("third");
    }, 3000);
  })

  //改造Promise：
  function print(delay, msg) {
    return new Promise(function(resolve, reject) {
      setTimeout(function(){
        console.log(msg);
        resolve();
      }, delay);
    });
  }

  print(1000, "first").then(function() {
    return print(4000, "second");
  }).then(function(){
    print(3000, "third");
  });
  //这种返回一个Promise对象的函数被称为 Promise函数，它常常用于开发基于异步操作的库

  // 继续美化
  async function asyncFunc() {
    await print(1000, "first");
    await print(4000, "second");
    await print(3000, "third");
  }
  asyncFunc();

构造Promise
  new Promise(function(resolve, reject) {
    // do something here
  })
  Promise接受的这个函数被称为 起始函数，这个函数会在构造之后异步运行，起始函数包含两个参数 resole和reject.
  resole和reject都是函数，resolve代表一切正常，reject是出现异常时所调用的：
  Promise 类有 .then() .catch() .finally() 三个方法，其中
    .then() 将参数中的函数添加到当前的Promise的正常执行序列，传入的函数会按顺序依次执行，有任何异常都会跳转到catch序列
    .catch() 设定Promise的异常处理序列
    .finally() 是Promise执行到最后一定会执行的序列

JavaScript 代码规范：
所有的JavaScript项目适用同一种规范。
  1. 变量名推荐使用驼峰法来命名(camelCase):
  2. 通常运算符 ( = + - * / ) 前后需要添加空格:
  3. 通常使用 4 个空格符号来缩进代码块
  4. 一条语句通常以分号作为结束符。
  5. 对象定义的规则:
    将左花括号与类名放在同一行。
    冒号与属性值间有个空格。
    字符串使用双引号，数字不需要。
    最后一个属性-值对后面不要添加逗号。
    将右花括号独立放在一行，并以分号作为结束符号。
  6. 为了便于阅读每行字符建议小于数 80 个。
    如果一个 JavaScript 语句超过了 80 个字符，建议在 运算符或者逗号后换行。
  7. 一般很多代码语言的命名规则都是类似的，例如:
    变量和函数为小驼峰法标识, 即除第一个单词之外，其他单词首字母大写（ lowerCamelCase）
    全局变量为大写 (UPPERCASE )
    常量 (如 PI) 为大写 (UPPERCASE )
  8. - 通常在 JavaScript 中被认为是减法，所以不允许使用。
  9. 变量名不要以 $ 作为开始标记，会与很多 JavaScript 库冲突。

JavaScript 函数
  JavaScript使用 function关键字定义函数
    function functionName(params) { 
      // function body
    }
  函数表达式：JavaScript 函数可以通过一个表达式定义。
    var x = function(a, b) {  return a * b; }
    z = x(3, 4);
  上面的函数可以看做一个匿名函数

  Function() 构造函数
  var myFunction = new Function("a", "b", "return a * b");
  var x = myFunction(3, 4);
  只需要了解function可以通过构造函数构造，在 JavaScript 中，很多时候，你需要避免使用 new 关键字。

  函数提升（Hoisting）
  前面已经提到过 变量提升，函数可以在声明之前调用
  自调用函数： 如果在表达式后面添加（），则会自动调用
  (function(a, b) { 
    var x = "Hello!"; 
  })();     // 该函数将自己调用自己

  函数可作为一个值使用：
  var x = myFunction(3, 4) * 2;

  函数是对象
  typeof(myFunction)   // return "function"
  JavaScript 函数有属性和方法
  function myFunction(a, b) {
    return arguments.lenght;  // 说明JS中function是有自己的属性和方法的
  }
  var txt = myFunction.toString();
  函数定义作为对象的属性，称之为对象方法。 // 一个对象里面某个字段是一个方法
  函数如果用于创建新的对象，称之为对象的构造函数。   // 就是构造函数

  箭头函数
  ES6 新增了箭头函数的支持，它比普通函数的表达式更简洁
  (agr1, arg2, arg3, ... argN) => {  函数声明 }
  (arg1, arg2, arg3, ... argN) => 表达式(单一)
    等价于 (agr1, arg2, arg3, ... argN) => {  return 表达式 }
  当只有一个参数的时候，圆括号可省略
  (arg1) => { 函数声明 }  等价于 arg1 => { 函数声明 }
  没有参数的时候，应该写成一对圆括号
  () => { //函数声明 }
  注意事项：
  有的箭头函数都没有自己的 this。 不适合定义一个 对象的方法。
  当我们使用箭头函数的时候，箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的。
  箭头函数是不能提升的，所以需要在使用之前定义。
  使用 const 比使用 var 更安全，因为函数表达式始终是一个常量。
  如果函数部分只是一个语句，则可以省略 return 关键字和大括号 {}，这样做是一个比较好的习惯:
    const x = (x, y) => x + y
  箭头函数的自调用 (() => {})()  

JavaScript 函数参数
函数显示参数（Parameters）与 隐式参数（Arguments), 类似于java中的形参和实参
参数规则
  JavaScript 函数定义显式参数时没有指定数据类型。
  JavaScript 函数对隐式参数没有进行类型检测。
  JavaScript 函数对隐式参数的个数没有进行检测。
默认参数 ES5中函数在调用时没有传递参数，参数会默认设置为 undefined
ES6 函数可以自带参数
  function myFunction(x, y = 10) {}  
arguments对象， arguments对象包含了函数调用的参数数组 arguments[i]
函数参数的值传递和对象传递，类似java中的 值传递和引用传递

JavaScript 函数调用
JavaScript 函数有四种调用方式，每种方式在于this的初始化

JavaScript 闭包
闭包就是一个函数引用另一个函数的变量，因为变量被引用着所以不会被回收，
因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会增加内存消耗。
或者说闭包就是子函数可以使用父函数的局部变量，还有父函数的参数。

闭包是一种保护私有变量的机制，在函数执行时形成私有的作用域，保护里面的私有变量不受外界干扰。
直观的说就是形成一个不销毁的栈环境。
  实例： 解决计数器困境
  var add = function() {
    var counter = 0;
    return function() {
      return counter += 1;
    }
  }();

  add(); add() add() //经过三次调用 counter此时的值为3. 实现了累加器的目的且修改counter的值只能通过调用add()
  实例解析：
  变量 add 指定了函数自我调用的返回字值。
  自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。
  add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。
  这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。
  计数器受匿名函数的作用域保护，只能通过 add 方法修改。

JavaScript HTML DOM
网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）
查找HTML元素，三种方法：
  1. 通过id找到 HTML 元素。 var x = document.getElementById("id");
  2. 通过标签名找到 HTML 元素.  var y = x.getElementsByTagName("p");
  3. 通过类名找到 HTML 元素  var x = document.getElementsByClassName("class-name");
note:
 getElementsByTagName 和 getElementsByClassName 这两个方法查找多个 dom 元素，
 返回的是 htmlcollection 类型，是伪数组而不是真数组，故不能使用数组的方法。
  我们可以使用数组原型配合 slice 方法，利用 call，apply，bind 方法将伪数组转为真数组。

JavaScript HTML DOM - 改变HTML
  document.write();
	绝对不要在文档(DOM)加载完成之后使用 document.write()。这会覆盖该文档。
  document.getElementById(id).innerHTML= new HTML document

JavaScript HTML DOM EventListener
  document.getElementById(id).addEventListener("click", displayDate);

事件冒泡 或者 事件捕获
事件传递方式有两种：冒泡 与 捕获
 事件传递定义了元素事件触发的顺序， 冒泡中，内部事件先被触发。 捕获中外部元素会先被触发。
 addEventListener(event, function, useCapture);
 默认值为false， 是冒泡传递.  当值为true时事件使用捕获传递.
 element.removeEventListener("mousemove", myFunction);

HTMLCollection 和 NodeList
  NodeList 是一个文档节点的集合。
  NodeList 与 HTMLCollection 有很多类似的地方。
  NodeList 与 HTMLCollection 都与数组对象有点类似，可以使用索引 (0, 1, 2, 3, 4, ...) 来获取元素。
  NodeList 与 HTMLCollection 都有 length 属性。
  HTMLCollection 元素可以通过 name，id 或索引来获取。
  NodeList 只能通过索引来获取。
  只有 NodeList 对象有包含属性节点和文本节点。
  HTMLCollection是动态几何，对增删敏感， NodeList类似快照，对节点的增删不敏感。

JavaScript 对象
  JavaScript 中的所有事物都是对象：字符串、数值、数组、函数...

JavaScript 类
  JavaScript 是面向对象的语言，但 JavaScript 不使用类。
  在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。
  JavaScript 基于 prototype，而不是基于类的。

JavaScript Number对象
JavaScript只有一种数字类型
  所有的JavaScript数字均为64位
八进制和十六进制
  如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数;
  如果前缀为 0 和 "x"，则解释为十六进制数。
  绝不要在数字前面写零，除非您需要进行八进制转换。 
  默认情况下，JavaScript 数字为十进制显示。
 但是你可以使用 toString() 方法 输出16进制、8进制、2进制。
  var myNumber=128;
  myNumber.toString(16);   // 返回 80
  myNumber.toString(8);    // 返回 200
  myNumber.toString(2);    // 返回 10000000
无穷大（Infinity）
  当数字运算结果超过了JavaScript所能表示的数字上限，结果为无穷大(Infinity).同样也有负无穷大(-Infinity)
  除以0也能产生无穷大：
  var x = 2/0;       // 无穷大（Infinity）
  var y = -2/0;      // -Infinity
NaN - 非数字值
  isNaN() 全局函数，可以判断一个值是否是NaN值
  var x = 1000 / 0;
  isNaN(x); // 返回 false
数字可以是数字或者对象
  var x = 123;
  var y = new Number(123);
  typeof(x) // 返回 Number
  typeof(y) // 返回 Object
Note: Infity, -Infinity, NaN
 关于 Infinity， -Infinity 和 NaN
  Infinity ， -Infinity 和 NaN 都是 JavaScript 保留字，不能用作标识符，对大小写敏感。
  -Infinity 的负号与 "Infinity" 之间不能有空格。
  -Infinity 不需要用括号包围； 1 - (-Infinity) 和 1 - -Infinity 是等价的。
  和其他数字一样，这三者与字符串相加会得到字符串。
  这三者不等于任何一个有限数字。
  使用对象的 .stringgify() 方法转换为 JSON 文本时，这三者会被转换为 null 。
  Infinity 运算法则

  正数除以 0 得 Infinity。
  Infinity 加或减任何有限数字都得 Infinity 。Infinity + Infinity 或 Infinity - -Infinity 也得 Infinity 。
  Infinity 乘或除以任何有限正数得 Infinity 。Infinity 乘或除以任何有限负数得 -Infinity 。 Infinity * Infinity 或 Infinity / 0 也得 Infinity 。Infinity * -Infinity 得 -Infinity。
  Infinity - Infinity 得 NaN 。 Infinity / Infinity 得 NaN 。 Infinity * 0 得 NaN 。
  Infinity == Infinity 为真。 Infinity.isNaN() 为假。 Infinity.isFinite() 为假。 Boolean(Infinity) 为真。
  -Infinity 运算法则

  负数除以 0 得 -Infinity。
  -Infinity 加或减任何有限数字都得 -Infinity 。-Infinity + -Infinity 或 -Infinity - Infinity 也得 -Infinity 。
  -Infinity 乘或除以任何有限正数得 -Infinity 。-Infinity 乘或除以任何有限负数得 Infinity 。 -Infinity * Infinity 或 -Infinity / 0 也得 -Infinity 。-Infinity * -Infinity 得 Infinity。
  -Infinity - -Infinity 得 NaN 。 -Infinity / -Infinity 得 NaN 。 -Infinity * 0 得 NaN 。
  -Infinity == -Infinity 为真。 -Infinity.isNaN() 为假。 -Infinity.isFinite() 为假。 Boolean(-Infinity) 为真。
  NaN 运算法则

  0 / 0 得 NaN 。上面也有一些得 NaN 的情况。
  NaN 加、减、乘或除以任何数（包括 Infinity 、 -Infinity 和 NaN 本身）得 NaN 。
  无论变量 x 取何值（包括 undefined 、 null 、 true 、 false 、 Infinity 、 -Infinity 和 NaN 本身），NaN == x 恒为假。NaN.isNaN() 为真。 NaN.isFinite() 为假。 Boolean(NaN) 为假。

JavaScript 字符串(String)对象
  可使用位置(索引)访问字符串中任何的字符
  var car = "Volvo"
  var character = car[3];
字符串属性和方法
  属性:
  length
  prototype
  constructor

  方法:
  charAt()
  charCodeAt()
  concat()
  fromCharCode()
  indexOf()
  lastIndexOf()
  match()
  replace()
  search()
  slice()
  split()
  substr()
  substring()
  toLowerCase()
  toUpperCase()
  valueOf()

JavaScript Date(日期)对象
有四种方式初始化日期:
  Date 对象用于处理日期和时间。 
  new Date();
  new Date(value);
  new Date(dateString);
  new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);

JavaScript 数组对象
创建一个数组的三种方式：
  1. var myCars = new Array();
     myCars[0] = "BMW";
     myCars[1] = "Volvo"
  2. var myCars = new Array("BWM", "Volvo");
  3. var myCars = ["BWM", "Volvo"];
在一个数组中你可以有不同的对象
遍历方式：
  const ary = ['a', 'b', 'c'];

  // 最基本的方式, 只能遍历下标有序递增的数组
  for (let i=0; i<ary.length; i++) {
    console.log(i, ary[i]);   // 0 a  1 b  2 c
  }

  // in:每遍历一次数组指针向后移动一位, 并得到当前数组元素值的下标, 可以通过 ary[key] 来访问数组元素值
  for (let key in ary) {
    console.log(key, ary[key]);  // 0 a  1 b  2 c
  }

  // of:每遍历一次数组指针向后移动一位, 并得到当前数组元素的值, 处理二维数组时极为方便
  for (let value of ary) {
    console.log(value);    // a b c
  }

Js还为数组对象内置了多种迭代方法, 处理数组时极为方便
  /**
  *  forEach(function)
  *  
  *  该方法接受一个函数作为参数, 该函数拥有两个参数, 分别为数组的值、键
  *  该方法没有返回值
  */

  ary.forEach((value, key) => {
      console.log(key, value); // 0 a  1 b  2 c
  })

  /**
  * map(function)
  *  
  * 该方法接受一个函数作为参数, 该函数拥有两个参数, 分别为数组的值、键
  * 可以在传入的函数中返回相应的值,你每次迭代时返回的值会被map方法组装成一个新数组作为返回值返回
  */

  var result = ary.map((value, key) => {
      return value + '_runoob.com';
  })

  console.log(result); // ['a_runoob.com', 'b_runoob.com', 'c_runoob.com']

