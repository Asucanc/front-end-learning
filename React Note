JSX 简介
  const element = <h1>hello, world</h1>
  JSX, JavaScript的语法拓展，在React中配合使用JSX， JSX可以很好地秒速UI应该呈现
  它应有的交互的本质形式，JSX具有JavaScript的全部功能

  JSX可以生成React元素，并将其渲染为DOM。

  为什么使用JSX？
  React认为渲染的本质上与其他UI逻辑内在耦合，比如在UI中需要绑定处理事件、在某些时刻
  状态发生变化时需要通知到UI，以及需要在UI中准备好数据。

  JSX 也是一个表达式
  在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象。
  也就是说，你可以在 if 语句和 for 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX：

  JSX 特定属性
  你可以通过使用引号，来将属性值指定为字符串字面量： const element = <div tabIndex="0"></div>;
  也可以使用大括号，来在属性值中插入一个 JavaScript 表达式： const element = <img src={user.avatarUrl}></img>;
  Note： 
    1. 在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。
    你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。
    2. JSX 因为在语法上更接近JavaScript，所以React DOM使用 camelCase（小驼峰命名）来定义属性的名字

  使用JSX指定子元素
  假如一个标签里面没有内容，可以使用 /> 来闭合标签，就像XML的语法一样
  const element = <img src={user.avatarUrl} />

  JSX可以防止注入攻击
  const title = response.potentiallyMaliccciousInput;
  //直接使用也是安全的
  const element = <h1>{title}</hi>
  React DOM 在渲染所有输入内容之前，默认都会进行转义

  JSX表示对象
  Babel 会把JSX转译为一个名为 React.createElement() 函数调用，所以以下两种示例代码完全等效：
    const element = (
      <h1 className="greeting"> 
        Hello, world!
      </h1>
    );

    const element = React.createElement(
      'h1',
      {className: 'greeting'},
      'Hello world!'
    );
  React.createElement() 会预先执行一些检查，以帮助你编写无错的代码，实际上会创建一个这样的对象：
  const element = {
    type: 'h1';
    props: {
      className: 'greeting',
      children: 'Hello, world!'
    }
  };
  这个对象称为“React 元素”. 它们描述了你希望在屏幕上看到的内容，React通过读取这些对象，
  然后使用它们来构建DOM以及保持随时更新。    

元素渲染
  元素是构成React应用的最小砖块。
  元素描述了在屏幕上想看到的内容。
  与浏览器的DOM元素不同，React元素是创建开销极小的普通对象。React DOM会负责更新DOM来与React元素保持一致                  

  将一个元素渲染为DOM
    <div id="root"></div>
    这样的节点称之为“根” DOM节点，因为该节点的所有内容都将有React DOM管理。
    仅是有React构建的应用通常只有单一的根DOM节点，如果在已有项目上集成React，可以包含多个独立的根DOM节点。
    想要将React元素渲染到根DOM节点中，只需把它们一起传入ReactDOM.render():
    const element = <h1>Hello, world</h1>
    ReactDOM.render(element, document.getElementById('root'));

  更新已渲染的元素
    React元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。
    一个元素就像电影的单帧，它代表了某个特定时刻的UI。
    根据已有的只是，更新UI的唯一方式是创建一个权限的元素，并将其传入ReactDOM.render().
    Note：实践中，大多数React应用只会调用一次ReactDOM.render()。
  
  React只更新它需要更新的部分
   React DOM会将元素和它的子元素与它们之前的状态进行比较，并且只会进行必要的更新来使DOM达到预期的状态。

组件 & Props
  组件允许你将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。
  组件，从概率上类似于JavaScript函数，它接受任意的入参（即Props），并返回用于描述展示页面内容的React元素

  函数组件与class组件
    定义组件最简单的方式就是编写JavaScript函数：
      function Welcome(props) {
        return <h1>Hello, {props.name}</h1>;
      }
    上面是一个简单的函数组件，接受props参数，返回React元素。
    这类组件被称为函数组件，本质上就是JavaScript函数。

    class组件
    className Welcome extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
      }
    }
    上面两个组件在React里是等效的。
  
  渲染组件
    前面的React元素只是DOM标签，如 const element = <div />;
    React元素也可以是用户自定义的组件：
      const element = <Welcome name="Carol" />
      当React元素为用户自定义的组件时，它会将JSX所接收的属性（attribute）以及子组件（children）转换为单个对象传递给组件，
      这个对象被称之为“props”。
        function Welcome(props) {
          return <h1>Hello, {props.name}</h1>
        }
        const element = <Welcome name="Carol" />;
        ReactDOM.render(
          element,
          document.getElementById('root')
        );
      Note：组件名字必须以大写字母开头。 
      React会将以小写字母开头的组件视为原生DOM标签， 如<div /> 代表HTML的div标签，
      而<Welcome />则代表了一个组件。
  
  组合组件与提取组件
    最初看上去，提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。
    根据经验来看，如果 UI 中有一部分被多次使用（Button，Panel，Avatar），或者组件本身就足够复杂（App，FeedStory，Comment），
    那么它就是一个可复用组件的候选项。

  Props的只读性
    组件无论是函数组件还是通过class声明，都绝不能修改自身的props，
    所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。
    ps： 纯函数是指 该函数不会尝试更改入参，多次调用相同的入参始终返回相同的结果，如：
      function sum(a, b) {
        return a + b;
      }
    当然，在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。

State & 生命周期
  State 与 props 类似，但是state是私有的，并完全受控于当前组件。
  将函数组件转换为class组件，步骤：
    1. 创建一个同名的ES6 class，并且集成于 React.Component.
    2. 添加一个空的 render() 方法。
    3. 将函数体移动到 render() 方法里面
    4. 在render() 方法中使用 this.props 替换 props。
    5. 删除剩余的空函数声明。
      function Clock(props) {
        return (
          <div>
            <h1>Hello, world!</h1>
            <h2>It is {props.date.toLocaleTimeString()}.</h2>
          </div>
        );
      }

      function tick() {
        ReactDOM.render(
          <Clock date={new Date()} />,
          document.getElementById('root')
        );
      }
      setInterval(tick, 1000);
    将上面的Clock组件转换为class组件，转换之后如下：
      class Clock extends React.Component {
        render() {
          return (
            <div>
              <h1>Hello world</h1>
              <h2>It's {this.props.date.toLocaleTimeString()}.</h2>
            </div>
          );
        }
      }
    每次组件更新的时候render方法都会被调用，但是只要在相同的DOM节点渲染<Clock />,
    就仅有一个Clock组件的class实例会被创建使用，这就使得我们可以使用如state或生命周期方法等其他许多特性。
  
  向class组件中添加局部的state
    通过以下三个步骤将date从props移动到state中：
    1. 把 render() 方法中的 this.props.date 替换成 this.state.date:
      class Clock extends React.Component {
        render() {
          return (
            <div>
              <h1>Hello, world!</h1>
              <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
            </div>
          );
        }
      }
    2. 添加一个class构造函数，然后在该函数中为 this.state 赋初值：
      class Clock extends React.Component {
        constructor(props) {
          super(props);
          this.state = {date: new Date()}
        }

        render() {
          return (
            <div>
              <h1>Hello, world!</h1>
              <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
            </div>
          );
        }
      }
      Class 组件应该始终使用 props 参数来调用父类的构造函数。
    3. 移除 <Clock /> 元素中的 date 属性：
     ReactDOM.render(
       <Clock />,
       document.getElementById('root')
     );

  将生命周期方法添加到Class中
    在具有许多组件的应用程序中，当组件被销毁时释放所占用的资源是非常重要的。
  
  最后时钟的代码如下：
  class Clock extends React.Component {
    constructor(props) {
        super(props);
        this.state = { date: new Date() };
    }
    
    tick() {
      this.setState({
        date: new Date()
      });
    }
    
    componentDidMount() {
      this.timerId = setInterval(
        () => this.tick(),
        1000
      );
    }
    
    componentWillUnmount() {
      clearInterval(this.timerId);
    }
    
    render() {
      return (
        <div>
          <h1>Hello World!</h1>
          <h2>It's {this.state.date.toLocaleTimeString()} now.</h2>
        </div>
      );
    }
  }

  ReactDOM.render(
    <Clock />,
    document.getElementById('root')
  );
  Note: 
  1. 不要直接修改State，而应该使用setState()，构造函数是唯一可以给 this.state 赋值的地方
 
  state 的更新可能是异步的

  state 的更新会被合并

  数据是向下移动的
    不管是父组件还是子组件都无法知道某个组件是有状态的还是无状态的，
    并且它们也不关心它是函数组件还是class组件。
    这就是为什么称state为局部的或是封装的原因，除了拥有并设置了它的组件，其他组件都无法访问。
    组件可以选择把它的state作为props向下传递到它的子组件中， 如：
      <h2>It is {this.state.date.toLocaleTimeString()}. </h2>
      或者：
      <FormattedDate date={this.state.date} />
     FormattedDate 组件会在其props中接收参数date，但是组件本身无法知道它是来自Clock的props还是state。
    这种一般被称之为“自上而下” 或是 “单向” 数据流。
    任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。

事件处理
  React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同:
  1. React 事件的命名采用小驼峰式（camelCase），而不是纯小写。
  2. 使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。

  在 React 中另一个不同点是你不能通过返回 false 的方式阻止默认行为。
  你必须显式的使用 preventDefault 。
  例如，传统的 HTML 中阻止链接默认打开一个新页面，你可以这样写：
    <a href="#" onclick="console.log('The link was clicked.'); return false">
      Click me
    </a>
  在React中，可能是这样的：
    function handleClick(e) {
      // 需要显式地调用
      e.preventDefault();
    }
  
  在React中需要谨慎对待JSX回调函数中的this，在JavaScript中，class的方法不会默认绑定this。
  如果忘记绑定，在回调中使用this的时候，其值为Undefined。
  有两种方法绑定this.
  1. 使用箭头函数进行绑定
    class LoggingButton extends React.Component {
      handleClick() {
        console.log('this is: ', this)
      }
      render() {
        // 此语法能保证 'handleClick' 内的 'this' 已经被绑定
        return(
          <button onClick={() => this.handleClick()}>
            Click me
          </button>
        );
      }
    }
  2. 使用class fields语法进行绑定：
    class LoggingButton extends React.Component {
      // 此语法能保证'handleClick' 内的'this'已经被绑定。
      // 这是实验性的语法
      handleClick = () => {
        console.log('this is ', this);
      }
      render() {
        return(
          <button onClick={this.handleClick}>
            Click me
          </button>
        );
      }
    }

  向事件处理传递参数
  在循环中我们通常会传递额外的参数， 例如，若id是你要删除的哪一行的ID，以下两种
  方式都可以向事件处理程序传递参数：
  <button onClick={(e) => this.deleteRow(id, e)}>
    Delete me
  </button>
  <button onClick={this.deleteRow.bind(this, id)}>
    Delete me
  </button>
  上面两种方式是等价的，分别通过箭头函数和Function.prototype.bind 来实现
  在上面两种方式中，React的事件对象e都会做为第二个参数进行传递，而通过'bind'的方式，
  事件对象以及更多的参数将会进行隐式的进行传递。

条件渲染
  在React中，你可以创建不同的组件来封装各种你需要的行为，然后根据不同的状态，
  你可以只渲染对应状态下的部分内容
  下面是几种在JSX中内联条件渲染的方法：
  与运算符 &&
    function MailBox(props) {
      const unreadMsgs = props.unreadMsgs;
      return (
        <div>
          <h1>Hello!</h1>
          {unreadMsgs.length > 0 &&
            <h2>
              You have {unreadMsgs.length} unread messages.
            </h2>
          }
        </div>
      );· 
    }

    const msgs = ['React', 'Re: React', 'Re: Re: React'];
    ReactDOM.render(
      <MailBox unreadMsgs={msgs} />,
      document.getElementById('root')
    );
  在JavaScript中, true && expression 总是会返回 expression， 
  false && expression 总是会返回 false.
  因此， 如果条件为 true, &&右侧的元素就会被渲染，如果是false，React会忽略并跳过它。

  三目运算符： condition ? true : false
    render() {
      const isLoggedIn = this.state.isLoggedIn;
      return (
        <div>
          {isLoggedIn
            ? <LogoutButton onClick={this.handleLogoutClick} />
            : <LoginButton onClick={this.handleLoginClick} />
          }
        </div>
      );
    }
  
  阻止组件渲染
  在极少数的情况下，你可能希望隐藏组件，即使它已经被其他组件渲染，若要完成此操作，你可以让render方法返回null，
  而不进行任何渲染

列表 & Key
  设计一个组件，该组件接受一个数字数组，并输出一个元素列表
    function NumberLsit(props) {
      const numbers = props.numbers;
      const listItems = numbers.map((number) => 
        <li>{number}</li>
      );
      return (
        <ul>{listItems}</ul>
      );
    }

    const numbers = [1, 2, 3, 4, 5];
    ReactDOM.render(
      <NumberLsit numbers = {numbers} />,
      document.getElementById('root')
    );
    // 运行这段代码会有一个警告： a key should be provided for list items.
    给每一个列表项添加分配一个key解决上面的警告：
     const listItems = numbers.map((number) =>
      <li kye={number.toString()}>
        {number}
      </li>
     );

  Key
    key帮助React识别哪些元素改变了，比如被添加或删除。因此需要给每一个元素赋予一个确定的标识

  用key提提取组件
    元素的key只有放在就近的数组上下文中才有意义。
    经验法则：在map()方法中的元素需要设置key属性
  
  key在兄弟节点之间必须唯一
  key会传递信息给React，但是不会传递给你的组件，如果需要使用key的值，可以用其他的属性显式地传递。

  在JSX中嵌入map
    JSX中允许嵌入任何表达式，所有可以进行直接内联map使用,像这样：
    function NumberLsit(props) {
      const numbers = props.numbers;
      return (
        <ul>
          {numbers.map((number) => 
            <listItems key={number.toString()} value={number} />  
          )}
        </ul>
      );
    }
  Tips：如果map()嵌套了太多层，可能需要考虑提取组件

表单
  受控组件: 使用React的state成为表单的唯一数据来源，渲染表单的React组件控制用户输入过程中表单发生的操作。
  被React以这种方式控制取值的表单输入元素叫做“受控组件”。
  这种方式使得<input type="text">, <textarea>和<select>之间的标签都变得非常相似，它们都接受一个value，
  可以使用它们来实现 受控组件

  文件input标签： value为只读，因此它是React中一个非受控组件。

  处理多个输入
    当需要处理多个input元素时，我们可以给每个元素添加 name 属性，
    并让处理函数根据 event.target.name的值选择要执行的操作
  
  受控输入空值
    在受控组件上指定value的prop会阻止用户更改输入。
    如果发现指定了value仍然能够输入，可能意外地将value设置为了null或undefined.

状态提升
  通常，多个组件需要反映相同的变化数据，这是我们建议将共享状态提升到共同父组件中去。

组合 VS 继承
  在React中使用继承我们可能会遇到一些问题，它们有些可以通过组合来解决
  包含关系
    有些组件无法提前知晓它们子组件的具体内容。
    在 Sidebar（侧边栏）和 Dialog（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。
    我们建议这些组件使用一个特殊的 children prop 来将他们的子组件传递到渲染结果中：
      function FancyBorder(props) {
        return (
          <div className={'FancyBorder FancyBorder-' + props.color}>
            {props.children}
          </div>
        );
      }
    这使得别的组件可以通过 JSX 嵌套，将任意组件作为子组件传递给它们。

  特例关系
    有些时候，我们会把一些组件看作是其他组件的特殊实例，
    比如 WelcomeDialog 可以说是 Dialog 的特殊实例。
    在 React 中，我们也可以通过组合来实现这一点。“特殊”组件可以通过 props 定制并渲染“一般”组件

  那么继承呢？
  不需要使用继承

React 哲学
  第一步：将设计好的 UI 划分为组件层级。
    根据单一功能原则来判定组件的范围。也就是说，一个组件原则上只能负责一个功能。
    如果它需要负责更多的功能，这时候就应该考虑将它拆分成更小的组件。

  第二步：用 React 创建一个静态版本

  第三步：确定 UI state 的最小（且完整）表示

  第四步：确定 state 放置的位置

  第五步：添加反向数据流
