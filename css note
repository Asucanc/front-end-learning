CSS 语法结构： 选择器 { (多条声明) 属性：值； 属性：值； }
选择器分为 id选择器 class选择器, CSS声明总是以分号(;)结束,声明总以大括号({})括起来:
css注释 /* 浏览器会忽视注释掉的css代码 */

id选择器,为特定id的HTML元素指定样式,如
#para1
{
    text-align: center;
    color: red;
}
 ID属性不要以数字开头,数字开头的ID在 Mozilla/Firefox 浏览器中不起作用.

class 选择器用于描述一组元素的样式,class 选择器有别于id选择器,class可以在多个元素中使用.
class 选择器在HTML中以class属性表示, 在 CSS 中,类选择器以一个点"."号显示：
在以下的例子中,所有拥有 center 类的 HTML 元素均为居中.
.center {text-align:center;}
类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用.

外部样式表
每个页面使用 <link> 标签链接到样式表. <link> 标签在(文档的)头部：
<head>
    <link rel="stylesheet" type="text/css" href="mystyle.css">
</head>
不要在属性值与单位之间留有空格(如："margin-left: 20 px" ),正确的写法是 "margin-left: 20px" .

内部样式表：
当单个文档需要特殊的样式时,就应该使用内部样式表.你可以使用 <style> 标签在文档头部定义内部样式表,就像这样:
<head>
<style>
hr {color:sienna;}
p {margin-left:20px;}
body {background-image:url("images/back40.gif");}
</style>
</head>

内联样式：
由于要将表现和内容混杂在一起,内联样式会损失掉样式表的许多优势.请慎用这种方法,例如当样式仅需要在一个元素上应用一次时.
要使用内联样式,你需要在相关的标签内使用样式(style)属性.Style 属性可以包含任何 CSS 属性.本例展示如何改变段落的颜色和左外边距：
<p style="color:sienna;margin-left:20px">这是一个段落.</p>

多重样式优先级
(内联样式)Inline style > (内部样式)Internal style sheet >(外部样式)External style sheet > 浏览器默认样式
详细notes： https://www.runoob.com/css/css-howto.html
https://www.runoob.com/w3cnote/css-style-priority.html

解释：
 1. 内联样式表的权值最高 1000；
 2. ID 选择器的权值为 100
 3. Class 类选择器的权值为 10
 4. HTML 标签选择器的权值为 1

CSS 优先规则1： 最近的祖先样式比其他祖先样式优先级高.
CSS 优先规则2："直接样式"比"祖先样式"优先级高.

CSS 有7种选择器：
1. ID 选择器, 如 #id{}
2. 类选择器, 如 .class{}
3. 属性选择器, 如 a[href="segmentfault.com"]{}
4. 伪类选择器, 如 :hover{}
5. 伪元素选择器, 如 ::before{}
6. 标签选择器, 如 span{}
7. 通配选择器, 如 *{}

CSS 优先规则3：优先级关系：内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器
CSS 优先规则4：计算选择符中 ID 选择器的个数(a),计算选择符中类选择器、属性选择器以及伪类选择器的个数之和(b),计算选择符中标签选择器和伪元素选择器的个数之和(c).按 a、b、c 的顺序依次比较大小,大的则优先级高,相等则比较下一个.若最后两个的选择符中 a、b、c 都相等,则按照"就近原则"来判断.
CSS 优先规则5：属性后插有 !important 的属性拥有最高优先级.若同时插有 !important,则再利用规则 3、4 判断优先级.

所有 CSS 的选择符由上述 7 种基础的选择器或者组合而成,组合的方式有 3 种：
后代选择符： .father .child{}
子选择符： .father > .child{}
相邻选择符: .bro1 + .bro2{}

在学习过程中,你可能发现给选择器加权值的说法,即 ID 选择器权值为 100,类选择器权值为 10,标签选择器权值为 1,当一个选择器由多个 ID 选择器、类选择器或标签选择器组成时,则将所有权值相加,然后再比较权值.这种说法其实是有问题的.比如一个由 11 个类选择器组成的选择器和一个由 1 个 ID 选择器组成的选择器指向同一个标签,按理说 110 > 100,应该应用前者的样式,然而事实是应用后者的样式.错误的原因是：权重的进制是并不是十进制,CSS 权重进制在 IE6 为 256,后来扩大到了 65536,现代浏览器则采用更大的数量..还是拿刚刚的例子说明.11 个类选择器组成的选择器的总权值为 110,但因为 11 个均为类选择器,所以其实总权值最多不能超过 100, 你可以理解为 99.99,所以最终应用后者样式.

CSS文本格式：
对于W3C标准的CSS：如果你定义了颜色属性,你还必须定义背景色属性.
颜色： color
文本对齐方式： text-align: left/right/center/justify(两端对齐)/inherit
文本修饰： text-decoration: none(定义标准文本,可以删除链接的下划线)/overline(顶部横线); line-through(横线穿过); underline(下划线),blink(定义闪烁的文本)
文本转换： none(默认值,标准文本), capitalize(每个单词首字母大写),uppercase(定义大写), lowercase(定义仅小写字母),inherit
文本方向： direction: ltr, rtl, inherit
文本字符间距： letter-spacing: normal(没有额外的空间),length: 定义字符之间的固定长度,允许负值. inherit.
文本行高： line-height: normal(设置合理行间距),number(此数字会与当前的字体尺寸相乘设置行间距),length(固定值),%(当前字体尺寸的百分比),inherit.
文本缩进： text-indent: length(固定缩进值), %(基于父元素宽度的百分比进行缩进), inherit.
文字阴影： text-shadow: none(默认值), h-shadow(必需,水平阴影位置) v-shadow(必需,垂直阴影的位置,允许负值) blur(可选,模糊程度) color(可选,阴影颜色)
文本是否被重写: unicode-bidi: normal|embed|bidi-override|initial|inherit;
文本字间距： 增加或减少字与字之间的空白, word-spacing: normal/length/inherit.
垂直对齐： vertical-align: baseline()
white-space: 规定元素内空白处理方式, normal(忽略), pre(空白被保留), nowrap(文本不会被换行), pre-wrap(保留空白符序列,正常换行), pre-line(合并空白字符,保留换行符), inherit

notes: 汉字的间隔调节也是用 letter-spacing 来实现的.
因为中文段落里字与字之间没有空格,因而 word-spacing 通常起不到调整间距的作用.

CSS字体：
font-family: 属性设置文本的字体系列,如果浏览器不支持第一种,将舱室下一种字体.
p { font-family: "Times New Roman", Times, Serif }
font-style: 指定斜体文字的字体样式属性,属性有三个值：normal(正常),italic(斜体),oblique(倾斜的文字)
note: , 但区别在于 italic 是指斜体字,而 oblique 是倾斜的文字,对于没有斜体的字体应该使用 oblique 属性值来实现倾斜的文字效果.
font-size: 设置字体大小 常用em作为单位, 1em = 16px;
font-weight: 指定字体的粗细. normal, bold, bolder, lighter. 100 - 900(400 = normal, 700 = bold)
font-variant: 设置小型大写字母的字体显示文本. normal/small-caps/inherit

CSS 链接
a:link { }  未访问的链接
a:visited { } 访问过的链接
a:hover { } 鼠标悬停在链接上
a:active { }  鼠标点击时
Note: 1. a:hover 必须跟在 a:link 和 a:visited后面.  2. a:active 必须跟在 a:hover后面

CSS 列表
list-style-type: 列表标记项的类型,常见的有 circle, square, upper-roman, lower-alpha.
list-style-image: url().  制定能够列表项标记的图像
list-style-position: 指定列表项标记的位置. inside/outside(默认值)

CSS 表格：
border-collapse: 指定表格边框是否折叠为一个单一的边框或隔开 value： collapse

CSS 盒子模型：
Margin(外边距) - 清除边框外的区域,外边距是透明的.
Border(边框) - 围绕在内边距和内容外的边框.
Padding(内边距) - 清除内容周围的区域,内边距是透明的.
Content(内容) - 盒子的内容,显示文本和图像.

当您指定一个 CSS 元素的宽度和高度属性时,你只是设置内容区域的宽度和高度.要知道,完整大小的元素,你还必须添加内边距,边框和外边距.

一旦为页面设置了恰当的 DTD,大多数浏览器都会按照上面的图示来呈现内容.然而 IE 5 和 6 的呈现却是不正确的.根据 W3C 的规范,元素内容占据的空间是由 width 属性设置的,而内容周围的 padding 和 border 值是另外计算的.不幸的是,IE5.X 和 6 在怪异模式中使用自己的非标准模型.这些浏览器的 width 属性不是内容的宽度,而是内容、内边距和边框的宽度的总和.
虽然有方法解决这个问题.但是目前最好的解决方案是回避这个问题.也就是,不要给元素添加具有指定宽度的内边距,而是尝试将内边距或外边距添加到元素的父元素和子元素.
IE8 及更早IE版本不支持设置填充的宽度和边框的宽度属性.
解决IE8及更早版本不兼容问题可以在HTML页面声明 <!DOCTYPE html>即可.

CSS 边框：
css边框允许你指定一个元素边框的样式和颜色.
border-style: dotted(点线边框)/dashed(虚线边框)/solid(实线边框)/double(双边框)/groove(3D沟槽边框)/ridge(3D脊边框,垄状边框)/inset(3D嵌入边框)/outset(3D突出边框,外凸边框)/hidden(隐藏边框)
border-width: 微边框指定宽度  支持固定值(px,pt,cm,em) 或者 三个关键值： thick/ medium(默认)/ thin
note:  "border-width" 属性 如果单独使用则不起作用.要先使用 "border-style" 属性来设置边框.
border-color: 顾名思义,指定边框颜色
单独设置四个边的边框样式： border-top(right,bottom,left)-style, 简写可以用 border-style: 转换
border简写: border-width  border-style(required), border-color

CSS 轮廓(outline)
将CSS 边框中的border改为outline
outline: 简写,顺序为 ooutline-color outline-style outline-width
note: outline是不占空间的,既不会增加额外的width或者height(这样不会导致浏览器渲染时出现reflow或是repaint)

CSS 外边距(margin)
margin 清除周围的(外边框)元素区域.margin 没有背景颜色,是完全透明的.
margin 可以单独改变元素的上,下,左,右边距,也可以一次改变所有的属性.
margin-top/right/bottom/left
note：Margin可以使用负值,重叠的内容.

CSS 填充(padding)

CSS 嵌套选择器：
p{ }: 为所有 p 元素指定一个样式.
.marked{ }: 为所有 class="marked" 的元素指定一个样式.
.marked p{ }: 为所有 class="marked" 元素内的 p 元素指定一个样式.
p.marked{ }: 为所有 class="marked" 的 p 元素指定一个样式.

CSS Display(显示) 与 Visibility(可见性)
隐藏元素可以 - display:none 或 visibility:hidden. 
这两个方法的区别在于 visibility:hidden 虽然隐藏了元素,但隐藏的元素仍需占用空间,依旧会影响布局
display: block (可以让一个内联元素作为块级元素) 块级元素(block)：独占一行，对宽高的属性值生效；如果不给宽度，块级元素就默认为浏览器的宽度，即就是100%宽。
display: inline (可以让一个块级元素显示为内联元素) 行内元素(inline)：可以多个标签存在一行，对宽高属性值不生效，完全靠内容撑开宽高。
display: inline-block  结合的行内和块级的优点，既可以设置长宽，可以让padding和margin生效，又可以和其他行内元素并排

CSS 定位(Position)
position 属性指定了元素的定位类型.
position 属性的五个值： static/relative/fixed/absolute/sticky

static 定位
HTML 元素的默认值,即没有定位,遵循正常的文档流对象.
静态定位的元素不会受到 top, bottom, left, right影响.

fixed 定位
元素的位置相对于浏览器窗口是固定位置.
即使窗口是滚动的它也不会移动：
Fixed定位使元素的位置与文档流无关,因此不占据空间.
Fixed定位的元素和其他元素重叠

relative 定位
相对定位元素的定位是相对其正常位置.
移动相对定位元素,但它原本所占的空间不会改变.
相对定位元素经常被用来作为绝对定位元素的容器块.

absolute 定位
绝对定位的元素的位置相对于最近的已定位父元素,如果元素没有已定位的父元素,那么它的位置相对于<html>:
absolute 定位使元素的位置与文档流无关,因此不占据空间.
absolute 定位的元素和其他元素重叠.

sticky 定位
sticky 英文字面意思是粘,粘贴,所以可以把它称之为粘性定位.
position: sticky; 基于用户的滚动位置来定位.
粘性定位的元素是依赖于用户的滚动,在 position:relative 与 position:fixed 定位之间切换.
它的行为就像 position:relative; 而当页面滚动超出目标区域时,它的表现就像 position:fixed;,它会固定在目标位置.
元素定位表现为在跨越特定阈值前为相对定位,之后为固定定位.
这个特定阈值指的是 top, right, bottom 或 left 之一,换言之,指定 top, right, bottom 或 left 四个阈值其中之一,才可使粘性定位生效.否则其行为与相对定位相同.

重叠的元素
元素的定位与文档流无关,所以它们可以覆盖页面上的其它元素
z-index属性指定了一个元素的堆叠顺序(哪个元素应该放在前面,或后面)
一个元素可以有正数或负数的堆叠顺序：
具有更高堆叠顺序的元素总是在较低的堆叠顺序元素的前面.
注意： 如果两个定位元素重叠,没有指定z - index,最后定位在HTML代码中的元素将被显示在最前面.

CSS Float(浮动)
CSS 的 Float(浮动),会使元素向左或向右移动,其周围的元素也会重新排列.
Float(浮动),往往是用于图像,但它在布局时一样非常有用.

CSS 对齐:
水平居中块级元素,可以使用margin: auto;
文本在元素中的对齐:  text-align:center;
图片的居中对齐: 先将图片放入块元素中(display:block;),再使用 margin:auto;
设置左右对齐的方法: 可以使用绝对定位(position:absolute)并搭配left, right使用.
垂直居中对齐在css之中有很多方法,一个简单的方法就是头部使用padding
水平和垂直都居中,可以使用padding和text-align:center；
垂直居中,通过设置 line-height 属性值和 height 属性值相等来设置 div 元素居中.
垂直居中,使用position和transform

ps: 设置容器上下 padding 相同实现垂直居中和使用 line-height=height 实现垂直居中仅对单行文本有效,当文本行数超过单行时：
 1)padding：文本仍然处于容器垂直居中的位置,但是容器的 height 会随着文本行数的增加而增大；
 2)line-height=height：容器的 height 不变,line-height 是文本的行间距,文本会溢出容器显示；
多行文本可使用 vertical-align: middle; 来实现元素的垂直居中,但是如果子元素的内容体积大于父元素的内容体积时,仍然会溢出,后面需要使用文字溢出处理来解决.

CSS 组合选择符
组合选择符 说明了两个选择器直接的关系，CSS当中包含了四种组合方式：
1. 后代选择器 （以空格“ ” 分隔）
2. 子元素选择器 （以大于 > 号分隔）
3. 相邻兄弟选择器  （以加号 + 分隔）
4. 普通兄弟选择器 （以波浪号 ~ 分隔）

后代选择器： 下面的选择器是指定 所有<div>元素中的<p>
div p
{
  background-color:yellow;
}

子元素选择器： 指定了<div>元素中所有 直接 子元素<P>
div>p {
    background-color:yellow;
}

相邻兄弟选择器： 下面实例选取了所有位于 <div> 元素后面的第一个<p>元素
div+p {
    background-color:yellow; 
}

后续兄弟选择器（普通兄弟选择器）： 以下实例选取了<div>元素之后所有的相邻<P>元素
div~p {
    background-color:yellow;
}

CSS 伪类（Pseudo-classes）
伪类的语法：
selector:pseudo-class {
    property:value;
}

anchor伪类， 以链接的不同形式为例:
a:link {color: colarVal}
a:visited {color: colarVal}
a:hovor {color: colarVal}
a:active {color: colarVal}

伪元素和伪类的语法是一致的。可以结合多个伪元素使用
:first-line 可以设置首行元素，只能作用于块级元素
:first-letter 向文本的首字母设置特殊样式
:before 可以在元素的内容前面插入新内容
:after 在元素之后插入新内容

伪类和伪元素的区别：
伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，
由于状态是动态变化的，所以一个元素达到特定状态时，它可能得到一个伪类的样式，当状态失去时，
它又会失去这个样式，由此看出，它的功能与class有些类似，但它是基于文档之外的抽象，所以叫伪类

伪元素相对于伪类来说，它更像是对元素中的特定内容进行操作，比如（first-line,first-letter）,
操作的层级比伪类更深一层，也因此它的动态性更低（有动态性，比如first-line，随着窗口的改变第一行的内容可能会发生改变）
实际上，设计伪元素的目的就是去选取诸如元素内容第一个字母，第一行，选取某些内容前面后面这种普通男选择器无法
完成的工作，它控制的内容实际上和元素是相同的，更像是基于元素的抽象，并不存在文档中，所以叫做伪元素

图像拼合技术
图像拼合就是多个图片的集合
意义：多个图片的页面可能需要多次请求图片资源才能完成页面的加载工作，所以使用图片拼合将有效减少请求的次数，提高页面的加载速度。
本质：就是先将页面所需的图片资源拼合在一起，在具体显示的位置指定具体显示拼合后图片的哪一部分。
比较无聊的技术，不知道实际中用的多不多。
显示指定位置图片的语法：
background:url(img_navsprites.gif) 0 0; - 定义背景图像和它的位置（左0px，顶部0px）

CSS 媒体类型
媒体类型允许你指定文件将如何在不同的媒体呈现。该文件可以在不同的方式显示在屏幕上纸张上或者听觉浏览器等等。
前面的例子已经使用过了 screen 媒体类型的实例：
@media screen and (max-width: 900px) {   }  大括号里面的样式将应用在电脑显示器上宽度不多于900px时候

CSS 属性选择器
具有特定属性的HTML元素样式
[title] { } 应用在所有拥有 title 这个属性的HTML元素
[title=hello] {  } 应用在所有具有 title这个属性并值为hello的HTML元素上
[title~=hello] {  }  应用在具有 title这个属性并且值里面有 hello的 HTML元素上
[title|=hello] 属性中必须是完整且唯一的单词，或者以 - 分隔开
[title^=hello] 属性值的前几个字母是 hello
[title$=hello] 属性值以 hello结尾  常见例子： a[src$=pdf] 

CSS 计数器
counter-reset: 创建或重置计数器, h1 { counter-reset: var} 定义一个计数器，在遇到新的<h1>的时候会重置它的值
counter-increment: 递增变量
content: 插入生成的内容
counter() 或 counters() 函数， 将计数器的值添加到元素，区别是counters()可以在不同的嵌套层级里面插入字符串。

CSS 网页布局
网页布局有很多种方式，一般分为以下集合部分： 头部区域，菜单导航区域，内容区域，底部区域。